


editor toggle
    first thing the game does when a player is spawned is set their editor to true if ws toggle is enabled
    game waits until hostplayer is spawned
    if hostplayer has editorDefaultOn, it initializes 
        - editor fx get made, some unused game husd are deleted, etc
        the deleted huds that are to be deleted are stored in a variable
        all of this is done in the editor's initialize rule
    editorDefaultOn checks for editor are done on host player
    since the var is on in each player, whoever is already in the game before host already has the correct value


translations:
    checkCN defines for an if statment
    every hud does the if statment to determien if its english or cn text
    this HAS to be every single hud, you cannot store a variable based on this check

    the idea is that it checks strings against their translations
    these huds gets evaluated on client side. the local client does the check.
    this means even if a hud is global, diferent clients see it differently.

    string re-eveluation needs to be on for this to work.


waits in version 1.8:
    player initialize waits for a mimum of 3 seconds, so map data loads first always
    
    0 seconds:
    - map data
    0.024
    - set default map variables to [] if not used (initialize)
    
    1 second:
    - custom portal addon
    - title data addon
    - iwt/hud per cp addon
    - ban per cp

    1.0024 second:
    - porta/dash/comp toggles

    2 seconds:
    - pre set portals
    - global huds
    
    5 second:
    - server timer
    6 second:
    - killball
    8 second:
    - pinballs
    10 second:
    - portals  

    others:
    - players wait about 3 seconds after joining + has spawned afer before starting game
    - 10 + hosthasspawner: rebuild kill/bounce
    - dva: waits until any player has spawned
    - hostplayer spawned + 1 
        - check editorDefaultOn hostplayer
        - wait 2, 
        - destroy stored hud
        - make editor hud

comp mode:
    - set true after initial loading to avoid global var problem
    - the attempt limit and time limit is enforcedby forcing invinsible and disabling the toggle
    - 2 seperate arrays for save names and save progres are used to save the attempt count. everytime your atempt update it also updates in the save.
    - attemps count down when someone restarts a run. if someone finish a run the save data wil be reduced by 1 while the ingame one stays even, this way if you rejoin, you still get your attempt used.
    - time limit is checked via regular match time rule
    
    functions:
    - sets a timelimit via a workshop slider
    - set maximum attempt limit, or keep on 0 for unlimited attemps
    - forces everyone to be invisible to eachother
    - disabled practice mode and spec mode
    - enabled via workshop settings and inside the web aplications settings tab


bans:
    on updating cache a cp it checks if the toggle is true or the cp is in the cp ban list
    if it is then player variable tracks if player is baned from tht tech
    the mechanics checks check that player variable instead of constandly the 
    the cache triggers on landing on a cp, on skiping a cp etc so its the right way to keep the variable correct


dash/ult reworked:
    wenever a dash or ult is used, it waits until its done to perform a check ult/dash sub
    in cache update ult/dash, the cache triggers on landing on a cp, on skiping a cp etc so its the right way to retriger easily
    anywere i could think of that should give or take away dashe this sub is trigered
    
    on trigger it waits until the skill is done
    affterwards it checks if you should be gratned it again or if it should be disabled
    this includes if you are stil standing on cp or off it or invis mode etc
    
    since the subs auto triger after the skills, it doesnt have to constnadly set charge or anything for invis and finish
    it just gives the charge when ult is turned on at the same time

    the using ult also disables primary fire for a while
    this is because using slash at the end of your ult makes it last longer

    to prevent you from doing dash start on all checkpoints, when you are not on cp 0- or last cp, there is a cooldown on swaping invincible and the button temporary gets deactivated.

split time:
    tracks time it takes you to complete a cp
    in modern version, this time resets when you fail or press quick reset
    the time is decided in the arrive rule
    it compares your new time vs the last stored time. once again taking into account practice mode
    when you fail or reset or complete a cp, the time is stored
    the splittime variable tracks the last stored time while the display is the variable that displays on screen unles its set to -Math.INFINITY wich means toggle is off


saving:
    pausing: going into spec, practice or invis etc
        if we didnt track pause time, one could leave and the time would be reset to last complete.
        saving only time on ariving would make it reset.
        u cannot save when someone leaves because var is already gone.
        for this reason the time is calculated with elapsed time, run time and pause time combined
    update:
        - sometimes a specific data is updated once, like cp number
        - sometimes it updates the entire set
         - saves get fully delted and replaced when  entering a cp
        this is viable because you cannot complete a cp in invis/spec
        and because there is a thing that makes it not save if in practice mode

    old version 
        - was sequencial array
        array: name, cp, player entitiy, etc
        - lookup was done like array[index eventplayer] + 1 for cp
        but during enitity lookup +/- from enitty instead of name

        old array = SavedProgress < kept ingame to deal with pasted things
        first number is index accesed from name
        second number is index if accesed from entity
        0 and -3 ; eventplayer name > SaveName
        1 and -2 ; cp  > SaveCp
        2 and -1 ; timer > SaveTimer
        3 and 0; eventplayer real  > SaveEnt
        4 and 1; totaltimeelapsed > SaveElapsed
        5 and 2; pausetimer > SavePauseTime
        6 and 3; ? > SaveUnkown


    new version:
        - array for each data stored to make it faster and lighter to acces

        arrays: Name, cp, entity, timer, elapsed time, pausetime, pausetimeenabled
        - remember to always whipe them on saving a map via clear exces data
        - both name and enitity have to be stored
            when a player leaves u cannot acces their player variables so you NEED to use entity
            when a player rejoins they get a new entity so to find it you NEED the old name

        - pause timer start/stop turned into subs
        - make/delete time also now subs

    

